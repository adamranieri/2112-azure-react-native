import { Team } from "./entities";
import { pgClient } from './connection';

export interface TeamDAO{

    getTeamById(id:number):Promise<Team>
    getAllTeams():Promise<Team[]>

    createTeam(team:Team):Promise<Team>
    updateTeam(team:Team):Promise<Team>
    deleteTeamById(id:number):Promise<boolean>
}
// sendErrorReport camel
// SendErrorReport pascal
// send_error_report snake
// send-error-report kebab

export class TeamDaoPostgres implements TeamDAO{

    async getTeamById(id: number): Promise<Team> {
        const sql = "SELECT * FROM team WHERE t_id = $1";
        const values = [id]
        const response = await pgClient.query(sql,values);
        const data = response.rows[0] // the actual data
        const team:Team = {...data, tId: data.t_id}
        return team
    }
    getAllTeams(): Promise<Team[]> {
        throw new Error("Method not implemented.");
    }
    async createTeam(team: Team): Promise<Team> {
        const sql = "INSERT INTO team values (default,$1,$2,$3) returning t_id";
        const values = [team.name, team.hometown, team.masoct];
        const response = await pgClient.query(sql,values);
        const id:number = response.rows[0].t_id
        team.tId = id; // id value was generated by the database
        console.log(response)
        return team;
    }

    updateTeam(team: Team): Promise<Team> {
        throw new Error("Method not implemented.");
    }
    deleteTeamById(id: number): Promise<boolean> {
        throw new Error("Method not implemented.");
    }

}